[["函数施工中.html", "7 函数（施工中） 7.1 定义一个函数 7.2 参数 7.3 变量作用域", " 7 函数（施工中） 一个函数，就是一个包装好的代码：你给它一些输入（参数），函数给你一个结果（返回值）： 比如，如果把电饭锅看成是一个函数，那么参数就是“米，水，电，时间”，你把“米，水，电，时间”给电饭锅，电饭锅返回给你一锅“米饭”。 写成代码，大概是： 米饭 = 电饭锅(米，水，电，时间) 这完全可以看成一个转换，或者映射 \\[ (米，水，电，时间) \\longmapsto 米饭 \\] 我们面前已经用过的，比如求List的长度： a = [1,2,3,4,5] a_size = len(a) print(a_size) ## 5 看a_size = len(a)这个代码 len() ：函数名 len(a) ：其中a是参数，即“你提供给这个函数的东西” a_size = len(a)：会返回a的长度（元素的数量），你把这个结果放在变量a_size之中 7.1 定义一个函数 在python中 定义一个函数的关键字是def， def后，是函数名，小括号内是参数（这个函数要接收的东西），最后是冒号 函数体，要有“1个缩进” 返回关键词是return。如果函数执行完都没有遇到return，则返回none 7.1.1 例：加法函数 举一个最简单的例子，我们要写一个加法函数，其作用就是把2个变量相加。或者说，你给这个函数“传递2个参数”，这个函数会返回他们的和。 #%% 定义一个加法函数 def add(x, y): z = x + y return z 逐行解释一下 第一行： def add(x, y): 定义一个函数，由def开头 接着是你给这个函数起的名字add 名字后面是小括号，里面包含了这个函数的“参数”。这里是2个参数，命名为x和y。显然，这就是你调用这个函数的时候，要给函数的东西。 最后是冒号，不要忘记 注意：关于参数，2个参数的名字你可以自己定义，不一定是x和y。这2个参数的名字，如同一切变量名一样，最终会”指向”2个值，所以你在函数的内部，就可以用这2个名字，来引用这2个值 第二行：z = x + y 注意，前面有“1个”缩进，指示这个语句比函数本身低一级 z = x + y，一目了然。需要说明的是，函数体内的2个参数，调用的时候已经有指向的目的地了。所以不会出现类似x不存在之类的错误。 第三行：return z 前面还是“1个”缩进，这是和z = x + y同一个层级的代码。 返回使用return语句。这里把和z，返回给上一层。 定义好之后，我们可以像使用任何函数一样调用它 我们来一个很熟悉的代码。 a = 1 b = 2 c = add(a, b) print(c) ## 3 7.1.2 例：求两个数的最大值 思路： 如果x &gt; y，则返回x。 否则返回y。（x &lt;= y，此时返回y也是最大值） #%% 定义一个函数，接收两个参数，返回其最大值 def my_max(a, b): if a &gt;= b: return a # 返回a else: return b # 返回b print(my_max(3,5)) ## 5 7.1.3 例：计算圆的面积 另一个例子，已知：圆的半径是\\(r\\)，我们要计算圆的面积，公式就是\\(y = \\pi r^2\\)。 我们准备写一个函数来做这件事： 这个函数会根据我们提供的半径\\(r\\)，返回一个圆的面积给我们。 显然，这个函数必然是接受r作为参数 我们做的，是算出面积，然后返回一下 def calc_area(r): area = 3.14159 * (r ** 2) return area ] x = 5 area = calc_area(x) print(f&quot;半径为{x}的圆，其面积为{area:0.2f}&quot;) ## 半径为5的圆，其面积为78.54 7.1.4 什么也不做的函数 有时候需要先占用函数名，但是函数的内容想以后再写，此时可以写一个空函数。函数体内只需要使用pass语句。 特别地，没有return语句（例如现在这种情况），或者return语句不返回值的时候，函数会返回一个none。 def do_noting(): pass print(do_noting()) ## None 7.2 参数 7.2.1 使用参数名 把参数传递给函数，可以按参数的顺序，也可以使用参数的名称 7.2.2 例：使用参数名称传递参数 def print_info(name, age): print(&quot;姓名: &quot;, name) print(&quot;年龄: &quot;, age) print_info(&#39;alex&#39;,20) # 按参数顺序：姓名，年龄 ## 姓名: alex ## 年龄: 20 print (&quot;------------------------&quot;) ## ------------------------ print_info(age = 21, name = &quot;bob&quot;) # 按参数名，此时不用考虑参数的顺序 ## 姓名: bob ## 年龄: 21 7.2.3 默认参数 定义函数的时候，可以给某些参数定义一个默认值。 默认参数必须定义在最后。 7.2.4 例：乘方函数（n次方） def power(x, n=2): # n有默认值 return x ** n print(power(5)) # 调用函数不传递n的值，使用默认值，结果为25 ## 25 print(power(3, 3)) # 调用函数传递n的值，使用传递值，结果为27 ## 27 7.2.5 不定长参数（进阶） 函数可以接受任意多个参数，例如求最大值的函数max() print(max(4,1,5,2)) ## 5 你要写一个这样的函数，那么可创建一个新的参数，前面带一个*号。那么不在参数列表里的参数，会组成一个tuple，并且绑定带这个带*号的变量名。 # 第一个参数是class_id，从第二个参数起，不定数量个参数，都会组成一个tuple，并命名为`students`(没有*) def print_students(class_id, *students): &#39;打印班级号，和同学的姓名&#39; print(&quot;班级:&quot;,class_id) print(&quot;学生包括:&quot;, students) for s in students: # 也可以逐一打印 print (s) print_students(5 ,&quot;alex&quot;,&quot;bob&quot;,&quot;clare&quot;) ## 班级: 5 ## 学生包括: (&#39;alex&#39;, &#39;bob&#39;, &#39;clare&#39;) ## alex ## bob ## clare 7.3 变量作用域 你在函数里调用了一个变量名，python会“从里到外”找这个变量，顺序是LEGB LEGB含义解释：（暂时不用管） L-Local(function)即局部名称；函数内的名字空间 E-Enclosing function locals即函数中嵌套函数的外部；外部嵌套函数的名字空间(例如closure) G-Global(module)即全局名称；函数定义所在模块（文件）的名字空间 B-Builtin(Python)即内置名称；Python内置模块的名字空间 7.3.1 局部作用域 a = 10 # 全局变量a def func(): a = 20 # 局部变量a。在定义了局部变量a之后。后面使用a这个变量名，将会首先找到这个变量（即从里到外找） print(a) # 应该是20 func() ## 20 a = 10 # 全局变量a def func(): print(a) # 在函数内部，没有变量a，那么就往外一层找，因此会找到全局变量`a`，应该等于10 func() ## 10 注:：函数內部和外部变量重名的情况，要额外小心。因此第二个例子可能是你“忘记了在函数内部定义a”，而不是你想要“引用全局变量a”，但是因为有一个全局的变量a，所以忘记定义a这个问题可能会被隐藏。 7.3.2 全局作用域 特别地，函数内部的赋值语句，其中的变量会被python看作一个local变量，如果内部未定义，就可能出错。 a = 100 # 全局变量a def func(): a = a + 1 # a + 1这个a系统认为是局部变量，但这个函数没有局部的a print(a) # 全局变量a func() UnboundLocalError: local variable &#39;a&#39; referenced before assignment 所以，如果你明确地要用一个函数外的变量，那么可以使用global关键字 a = 100 # 全局变量a def func(): global a # 说明：a这个变量名，指向的是全局变量a a = a + 1 print(a) # 全局变量a func() ## 101 "],["函数式编程入门.html", "8 函数式编程入门 8.1 map和filter 8.2 高阶函数（进阶）（施工中）", " 8 函数式编程入门 8.1 map和filter 8.1.1 map 有一个List，a = [1,2,3,4,5]，你现在要把其中的每一个元素都乘以2，并保存在一个新的List中。用现有的知识，可以这样 建立一个空的List用来保存结果result = [] 循环a中的所有元素，并且乘以2，添加到result的末端 a = [1,2,3,4,5] print(a) ## [1, 2, 3, 4, 5] result = [] for i in a: result.append(i*2) print(result) ## [2, 4, 6, 8, 10] map函数，可以把一个函数，应用到List中的所有元素上。 def do_double(x): &#39;翻倍函数&#39; return x * 2 print(do_double(3)) ## 6 把do_dobule函数，应用到列表a中的每一个元素里。 result = map(do_double, a) # 把do_dobule函数，应用到列表a中的每一个元素里。 print(list(result)) ## [2, 4, 6, 8, 10] 也可用列表推导 result = [i * 2 for i in a] print(result) ## [2, 4, 6, 8, 10] result = [do_double(i) for i in a] print(result) ## [2, 4, 6, 8, 10] 把a里的元素，全部转换为str result = map(str, a) # 把str函数，应用到列表a中的每一个元素里。 print(list(result)) ## [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;] 8.1.2 filter 有一个List，a = [1,2,3,4,5]，你现在要选出符合特定条件的元素，例如选出其中的基数，组成一个新的List。用循环做： a = [1,2,3,4,5] result = [] for i in a: if i % 2 == 1: result.append(i) print(result) ## [1, 3, 5] 和map一样，定义一个is_odd函数，作为filter的过滤条件，应该返回布尔值(True/False)，作为是否符合条件的结果。 def is_odd(x): return x % 2 == 1 print(is_odd(3)) ## True print(is_odd(6)) ## False filter(判断函数, List) resutl = filter(is_odd, a) print(list(result)) ## [1, 3, 5] 当然，也可以用列表推导 [i for i in a if is_odd(i)] ## [1, 3, 5] 8.1.3 混合map和filter 选出a中的基数，并乘以2 map 和 filter的做法 result = list(map(do_double, filter(is_odd, a))) print(result) ## [2, 6, 10] 列表推导的做法 result = [do_double(i) for i in a if is_odd(i)] print(result) ## [2, 6, 10] 注： 多数情况下，列表推导和map/filter函数几乎可以相互替代 列表更加符合Python的“风格” 但超级巨大List时，用map/filter性能更好：map/filter是一个lazy（惰性）函数，只有在你引用其中的值时，才会把函数真正应用上去。 map/filter的结果，最后要转为list 所以 清晰性：列表推导 &gt; map/filter函数 &gt; 循环 性能：map/filter函数 &gt; 列表推导 &gt; 循环 从逻辑上来讲，应该是先有map/filer：要把一个函数应用到List中的所有元素/过滤元素，这是个基础性的需求，大多数编程语言都有做这件事的办法。我们一般把这种操作统称为map/filter。Python的列表推导，可以看成是一个Python优化版的map/filter。 8.1.4 匿名函数 lambda 使用lambda关键字，一个表达式，直接返回这个表达式的结果，不用写return。 注： 对于初学者，建议还是把具体的操作起一个可以“顾名思义”的名字。 result = map(do_double, a) print(list(result)) ## [2, 4, 6, 8, 10] result = map(lambda x:x * 2,a) print(list(result)) ## [2, 4, 6, 8, 10] 8.2 高阶函数（进阶）（施工中） 在python中，函数是一等公民（头等函数，first-class function）。 一个函数，可以和任何变量或者对象一样，绑定一个名字（函数名），也可以换一个名字（重绑定），也可以作为参数传递给另一个函数（函数作为参数传另一个函数），也可以作为一个函数的返回值（函数返回另一个函数）。 8.2.1 “函数生成器”，用参数来生成不同的函数 "],["内置函数和常用库.html", "9 内置函数和常用库", " 9 内置函数和常用库 "],["numpy.html", "10 Numpy", " 10 Numpy "],["pandas.html", "11 Pandas", " 11 Pandas "],["综合数据处理.html", "12 综合数据处理", " 12 综合数据处理 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
