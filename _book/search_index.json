[["变量和常用数据类型.html", "4 变量和常用数据类型 4.1 变量 4.2 数值 4.3 字符串Str 4.4 布尔型 4.5 看懂出错信息 4.6 列表 4.7 元组 4.8 字典 4.9 类型提示Type Hints", " 4 变量和常用数据类型 4.1 变量 前面说过，Python（或者其他编程语言）中的变量，和你数学课上的x, y, z是同类的概念。 正如前面的例子，Python使用等号=来为一个变量赋值 #%% 赋值与重新赋值 a = 1 a = 2 print(a) 假如这个一开始不存在，那么赋值的同时，也会把这个变量创造出来。 对于Python语言，这个过程（不严格地说）大致是： （绑定）Python在电脑的内存空间找了一个空地，创建了一个对象(object)，存放了1这个值，然后把a这个名字，和这个对象绑定起来。 （重绑定）当我们对变量a赋其他值的时候，如a = 2的时候，Python另外创建了一个对象，存放了2这个值，然后把a这个名字，重新绑定到这个新的对象上。 （引用）变量名，就像一个内存中的对象的标签。引用这个名字，就是引用其表示的对象。 4.1.1 删除一个变量 使用del语句 #%% 删除变量 a = 1 del a print(a) 因为变量a已经被我们删除了，所以你再次引用a的时候，Python会告诉你, NameError: name &#39;a&#39; is not defined 4.1.2 动态语言 Python是一个“动态语言”，即Python的变量的类型是在运行过程中决定，或者说可以在运行中改变：你对这个变量赋什么值，这个变量就是什么类型。 查看变量类型的函数是type() 例如 #%% 动态类型 a = 1 print(type(a)) a = &#39;apple&#39; # 这里为a赋值了一个字符串 print(type(a)) &lt;class &#39;int&#39;&gt; &lt;class &#39;str&#39;&gt; 显然，a先是一个整型int&lt;class 'int'&gt;，然后变成了一个字符串str&lt;class 'str'&gt;。 这和我们的赋值顺序是一样的。类型后面会详细说 注意：Python的变量类型是动态确定的。变量的类型不一定能从名字看出来，这是出错的一大来源。 4.1.3 变量的命名规则 4.2 数值 Python 3.x以后，数值类型有2种，整型int，和浮点型float。 顾名思义，整型可以理解为整数： #%% 整型 a = 1 print(type(a)) ## &lt;class &#39;int&#39;&gt; 而浮点型则可以理解为小数： #%% 浮点型 a = 1.23 print(type(a)) ## &lt;class &#39;float&#39;&gt; 特别地，a = 1.0是什么类型？ a = 1.0 print(type(a)) ## &lt;class &#39;float&#39;&gt; 显然，a是浮点型：只要你赋值的时候有小数点。 这可能是因为： 这个变量客观上是个小数，只是“恰好”是1而已。 或者这个数被四舍五入，比如本来是1.0000001之类。 4.2.1 数值的操作 常见的操作包括加减乘除+, -, *, /，此处不再重复。 特别地，除法永远返回浮点类型： a = 4 / 2 print(a) ## 2.0 print(type(a)) ## &lt;class &#39;float&#39;&gt; 整除是//。若除数是整型，则返回整型；若出数是浮点型，则返回浮点型 5 // 2 ## 2 5 // 2.0 ## 2.0 取余% 5 % 2 ## 1 乘方 \\(2^3\\) 2 ** 3 ## 8 4.3 字符串Str 创建字符串，可以使用单引号、双引号、三单引号和三双引号。其中三引号可以多行定义字符串。 字符串：可以使用单引号、双引号 #%% 字符串 a = &#39;apple&#39; # 或者：a = &quot;apple&quot; print(a) ## apple 多行字符串：可以使用三个单引号，或者三个双引号。 a = &#39;&#39;&#39;Hello Python &#39;&#39;&#39; print(a) Hello Python 4.3.1 字符串的常用操作 连接字符串 + a = &#39;Hello&#39; b = &#39;Python&#39; print(a + b) ## HelloPython 其他常用操作 a = &#39;Hello Python&#39; print(&#39;lo&#39; in a) # in： 是否存在 ## True print(a.find(&#39;th&#39;) )# find：查找位置 ## 8 print(a.replace(&#39;Python&#39;,&#39;Bob&#39;)) # replace：替换 ## Hello Bob print(a.lower()) # 转为小写：lower ## hello python print(a.upper()) # 转为大写：upper ## HELLO PYTHON 切片：截取字符串的一部分 后面讲列表List会详细介绍 4.3.2 显示特殊字符：转义字符\\ “换行” print(&quot;Hello\\nPython&quot;) ## Hello ## Python 显示反斜杠、单引号、双引号等等 这些字符，本身已经是Python语法的一部分，要放在字符串中显示，需要转义 print(&#39;反斜杠\\\\&#39;) # 反斜杠 \\\\ ## 反斜杠\\ print(&#39;\\&quot;双引号\\&quot;&#39;) # 双引号 \\&#39; ## &quot;双引号&quot; print(&#39;\\&#39;单引号\\&#39;&#39;) # 单引号 \\&quot; ## &#39;单引号&#39; 如果一下子看不清楚，应该如何书写： 作为字符串最外侧的单引号，或者双引号，必须对称 a = &#39; &#39; 在单引号，或者双引号内，写入你要的文字 a = &#39;HelloWorld&#39; 把转义字符看成一个整体，插入其中，如\\n a = &#39;Hello\\nWorld&#39; print(a) ## Hello ## World 插入斜杠等，也是一样 4.3.3 字符串格式化 我们往往需要把一个变量插入一行字符中，例如我们想显示变量a和b的值 #%% 简单加法 a = 1 b = 2 c = a + b print(a) print(b) print(c) 会得到： 1 2 3 但问题是，你只看结果，其实分不清哪个是a，哪个是b，哪个是c。所以，我们更想要的是一句话，如 a的值是: 1 b的值是: 2 c的值是: 3 所以要用到字符串格式化，把变量和字符串混合。 print(&#39;a的值是:{}\\nb的值是:{}&#39;.format(a,b)) ## a的值是:1 ## b的值是:2 4.4 布尔型 4.5 看懂出错信息 4.6 列表 4.7 元组 4.8 字典 4.9 类型提示Type Hints "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
